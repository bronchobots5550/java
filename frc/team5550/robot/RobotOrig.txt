/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team5550.robot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Spark;
//import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.vision.VisionRunner;
import edu.wpi.first.wpilibj.vision.VisionThread;
import org.usfirst.frc.team5550.grip.*;
import org.opencv.core.Rect;
import org.opencv.core.MatOfPoint;
import org.opencv.imgproc.Imgproc;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends IterativeRobot {
	private static final String kDefaultAuto = "Default";
	private static final String kCustomAuto = "My Auto";
	private static final String kAuto1 = "Auto Test";
	private int curStep = 0;
	private boolean resetSensors = false;
	private String m_autoSelected;
	private SendableChooser<String> m_chooser = new SendableChooser<>();
	TalonSRX leftDrive, rightDrive;
	VictorSPX leftDriveFollow, rightDriveFollow;
	// DigitalInput cubeSwitch;
	// AnalogInput magSensor;
	XboxController controller;
	XboxController controller2;
	Spark intakeLeft, intakeRight;
	Elevator turboLift;
	UsbCamera camera;

	private static final int IMG_WIDTH = 320;
	private static final int IMG_HEIGHT = 240;

	private VisionThread visionThread;
	// private double centerR1 = 0.0;
	private double centerX = 0.0;
	private double numImg = 0;
	private final Object imgLock = new Object();
	public AHRS gyro;

	public static final int SCALE_HEIGHT = 26000;
	public static final int SWITCH_HEIGHT = 7700;
	public static final int BASE_HEIGHT = 10;
	public static final int EXCHANGE_HEIGHT = 2000;

	long endTime = 0;

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		m_chooser.addDefault("Default Auto", kDefaultAuto);
		m_chooser.addObject("My Auto", kCustomAuto);
		SmartDashboard.putData("Auto choices", m_chooser);
		gyro = new AHRS(Port.kUSB1);
		gyro.reset();
		leftDrive = new TalonSRX(0);
		rightDrive = new TalonSRX(2);
		leftDriveFollow = new VictorSPX(0);
		rightDriveFollow = new VictorSPX(1);
		leftDriveFollow.follow(leftDrive);
		leftDriveFollow.setInverted(true);
		// rightDriveFollow.setInverted(true);
		rightDriveFollow.follow(rightDrive);
		turboLift = new Elevator(1, false, true);
		initDriveMotors();
		controller = new XboxController(0);
		controller2 = new XboxController(1);
		intakeLeft = new Spark(9);
		intakeRight = new Spark(8);

		/** INITIALIZE CAMERA **/
		camera = CameraServer.getInstance().startAutomaticCapture();
		// camera.setBrightness(Preferences.getInstance().getInt("camBrightness", 50));
		// // GET SETTINGS FROM DASHBOARD
		// camera.setExposureManual(Preferences.getInstance().getInt("camExposure",
		// 50)); // GET SETTINGS FROM DASHBOARD
		camera.setResolution(IMG_WIDTH, IMG_HEIGHT);
		camera.setFPS(10);

		/** START VISION PROCESSING **/
		startVision();

		// turboLift.elevSetPosition(0);
		// turboLift.elevSetMotion(100,100);

		// magSensor = new AnalogInput(0);
		// cubeSwitch = new DigitalInput(0);
		m_chooser.addObject("Auto1", "Auto1");
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable chooser
	 * code works with the Java SmartDashboard. If you prefer the LabVIEW Dashboard,
	 * remove all of the chooser code and uncomment the getString line to get the
	 * auto name from the text box below the Gyro
	 *
	 * <p>
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the SendableChooser
	 * make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		curStep = 0;
		resetSensors = false;
		m_autoSelected = m_chooser.getSelected();
		initDriveMotors();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + m_autoSelected);
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {
		// SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
		// SmartDashboard.putNumber("Right Pos",
		// rightDrive.getSelectedSensorPosition(0));
		// SmartDashboard.putNumber("Gyro", gyro.getAngle());

		switch (curStep) {
		case 0:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveForward(276, true, SCALE_HEIGHT)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 1:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveTurnWheel(45)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 2:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
				endTime = System.currentTimeMillis() + 400;
			}
			if (autoIntake(true, endTime)) {
				curStep++;
				resetSensors = false;
				intakeLeft.set(0);
				intakeRight.set(0);
			}
			//
			break;
		case 3:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveForward(-6, true, BASE_HEIGHT)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 4:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveTurnWheel(90)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 5:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveForward(76, false, 0)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 6:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
				endTime = System.currentTimeMillis() + 1000;
			}
			if (autoIntake(false, endTime)) {
				curStep++;
				resetSensors = false;
				intakeLeft.set(0);
				intakeRight.set(0);
			}
			//
			break;
		case 7:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveForward(-72, true, SCALE_HEIGHT)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 8:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveTurnWheel(-90)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;
		case 9:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			if (driveForward(12, true, SCALE_HEIGHT)) {
				curStep++;
				resetSensors = false;
				leftDrive.set(ControlMode.PercentOutput, 0);
				rightDrive.set(ControlMode.PercentOutput, 0);
			}
			break;

		case 10:
			SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
			SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
			if (resetSensors == false) {
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
				endTime = System.currentTimeMillis() + 400;
			}
			if (autoIntake(true, endTime)) {
				curStep++;
				resetSensors = false;
				intakeLeft.set(0);
				intakeRight.set(0);
			}
			//
			break;
		default:
			// SmartDashboard.putNumber("Gyro Angle Final", gyro.getAngle());
			if (resetSensors == false) {
				SmartDashboard.putNumber("Gyro Angle Final", gyro.getAngle());
				gyro.reset();
				leftDrive.setSelectedSensorPosition(0, 0, 10);
				rightDrive.setSelectedSensorPosition(0, 0, 10);
				resetSensors = true;
			}
			leftDrive.set(ControlMode.PercentOutput, 0);
			rightDrive.set(ControlMode.PercentOutput, 0);
			turboLift.elevMovePosition(10);
		}

	}

	@Override
	public void teleopInit() {
		initDriveMotors();
		gyro.reset();
		leftDrive.setSelectedSensorPosition(0, 0, 10);
		rightDrive.setSelectedSensorPosition(0, 0, 10);

	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic() {
		double forwardSpeed = controller.getRawAxis(1);
		double turnSpeed = -controller.getRawAxis(4);
		int itUp = controller2.getPOV();
		double centerX = 0;
		double numImg = 0;

		synchronized (imgLock) {
			centerX = this.centerX;
			numImg = this.numImg;
		}
		SmartDashboard.putNumber("Vision Center", centerX);
		SmartDashboard.putNumber("Vision Images", numImg);
		SmartDashboard.putNumber("Left Pos", leftDrive.getSelectedSensorPosition(0));
		SmartDashboard.putNumber("Right Pos", rightDrive.getSelectedSensorPosition(0));
		SmartDashboard.putNumber("Gyro Angle Final", gyro.getAngle());

		if (controller2.getAButton()) {
			turboLift.elevMovePosition(EXCHANGE_HEIGHT);
		}
		if (controller2.getBButton()) {
			turboLift.elevMovePosition(BASE_HEIGHT);
		}
		if (controller2.getYButton()) {
			turboLift.elevMovePosition(SCALE_HEIGHT);
		}
		if (controller2.getXButton()) {
			turboLift.elevMovePosition(SWITCH_HEIGHT);
		}
		/*
		 * if (controller2.getBumper(Hand.kLeft)) { turboLift.elevNextPosition(-1); } if
		 * (controller2.getBumper(Hand.kRight)) { turboLift.elevNextPosition(1); }
		 */

		if (itUp == 0) {
			intakeLeft.set(-.7);
			intakeRight.set(.7);
		} else if (itUp == 180) {
			intakeLeft.set(.4);
			intakeRight.set(-.4);
		} else if (itUp == 90) {
			intakeLeft.set(-.4);
			intakeRight.set(-.4);
		} else if (itUp == 270) {
			intakeLeft.set(.4);
			intakeRight.set(.4);
		} else {
			intakeLeft.set(0);
			intakeRight.set(0);
		}
		if (forwardSpeed < .2 && forwardSpeed > -.2)
			forwardSpeed = 0;
		if (turnSpeed < .2 && turnSpeed > -.2)
			turnSpeed = 0;

		curvatureDrive(forwardSpeed, turnSpeed, true);

		// SmartDashboard.putNumber("Hall Effect", magSensor.getAverageValue());
		// SmartDashboard.putBoolean("Cube Switch", cubeSwitch.get());

	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}

	public void initDriveMotors() {

		leftDrive.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
		// leftDrive.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10,
		// 10);
		// leftDrive.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10,
		// 10);

		leftDrive.configNominalOutputForward(0, 10);
		leftDrive.configNominalOutputReverse(0, 10);
		leftDrive.configPeakOutputForward(1, 10);
		leftDrive.configPeakOutputReverse(-1, 10);
		leftDrive.setInverted(true);
		leftDrive.setSensorPhase(true);
		leftDrive.selectProfileSlot(0, 0);
		leftDrive.config_kP(0, .35, 10);
		leftDrive.config_kI(0, 0, 10);
		leftDrive.config_kD(0, 0, 10);
		leftDrive.config_kF(0, .25, 10);
		leftDrive.configMotionAcceleration(1500, 10);
		leftDrive.configMotionCruiseVelocity(2000, 10);
		leftDrive.configOpenloopRamp(1, 10);
		leftDrive.setNeutralMode(NeutralMode.Brake);

		rightDrive.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
		// rightDrive.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10,
		// 10);
		// rightDrive.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic,
		// 10, 10);

		rightDrive.configNominalOutputForward(0, 10);
		rightDrive.configNominalOutputReverse(0, 10);
		rightDrive.configPeakOutputForward(1, 10);
		rightDrive.configPeakOutputReverse(-1, 10);
		rightDrive.setInverted(false);
		rightDrive.setSensorPhase(true);
		rightDrive.selectProfileSlot(0, 0);
		rightDrive.config_kP(0, .35, 10);
		rightDrive.config_kI(0, 0, 10);
		rightDrive.config_kD(0, 0, 10);
		rightDrive.config_kF(0, .25, 10);
		rightDrive.configMotionAcceleration(1500, 10);
		rightDrive.configMotionCruiseVelocity(2000, 10);
		rightDrive.configOpenloopRamp(1, 10);
		rightDrive.setNeutralMode(NeutralMode.Brake);

	}

	public void curvatureDrive(double xSpeed, double zRotation, boolean isQuickTurn) {

		xSpeed = limit(xSpeed);

		zRotation = limit(zRotation);
		double m_quickStopAccumulator = 0;
		double m_quickStopAlpha = 0.1;
		double m_maxOutput = 0.8;
		double m_turnSpeed = 0.6;

		double angularPower;
		boolean overPower;

		if (isQuickTurn) {
			if (Math.abs(xSpeed) < 0.2) {
				m_quickStopAccumulator = (1 - m_quickStopAlpha) * m_quickStopAccumulator
						+ m_quickStopAlpha * limit(zRotation) * 2;
			}
			overPower = true;
			angularPower = zRotation;
		} else {
			overPower = false;
			angularPower = Math.abs(xSpeed) * zRotation - m_quickStopAccumulator;

			if (m_quickStopAccumulator > 1) {
				m_quickStopAccumulator -= 1;
			} else if (m_quickStopAccumulator < -1) {
				m_quickStopAccumulator += 1;
			} else {
				m_quickStopAccumulator = 0.0;
			}
		}
		angularPower *= m_turnSpeed;

		double leftMotorOutput = xSpeed + angularPower;
		double rightMotorOutput = xSpeed - angularPower;

		// If rotation is overpowered, reduce both outputs to within acceptable range
		if (overPower) {
			if (leftMotorOutput > 1.0) {
				rightMotorOutput -= leftMotorOutput - 1.0;
				leftMotorOutput = 1.0;
			} else if (rightMotorOutput > 1.0) {
				leftMotorOutput -= rightMotorOutput - 1.0;
				rightMotorOutput = 1.0;
			} else if (leftMotorOutput < -1.0) {
				rightMotorOutput -= leftMotorOutput + 1.0;
				leftMotorOutput = -1.0;
			} else if (rightMotorOutput < -1.0) {
				leftMotorOutput -= rightMotorOutput + 1.0;
				rightMotorOutput = -1.0;
			}
		}
		double maxVelocity = 3000;

		SmartDashboard.putNumber("Left Motor", leftMotorOutput);
		SmartDashboard.putNumber("Right Motor", rightMotorOutput);
		// SmartDashboard.putNumber("Left Velocity",
		// leftDrive.getSelectedSensorVelocity(0));
		// SmartDashboard.putNumber("Right Velocity",
		// rightDrive.getSelectedSensorVelocity(0));
		SmartDashboard.putNumber("Elevator", turboLift.getPosition());
		// leftDrive.set(ControlMode.Velocity , leftMotorOutput * maxVelocity);
		// rightDrive.set(ControlMode.Velocity, rightMotorOutput * maxVelocity);
		leftDrive.set(ControlMode.PercentOutput, leftMotorOutput * m_maxOutput);
		rightDrive.set(ControlMode.PercentOutput, rightMotorOutput * m_maxOutput);

	}

	public double limit(double value) {
		if (value > 1.0) {
			return 1.0;
		}
		if (value < -1.0) {
			return -1.0;
		}
		return value;
	}

	public void startVision() {

		visionThread = new VisionThread(camera, new GripPipeline(), pipeline -> {
			double s;
			double centerR1;
			if (!pipeline.filterContoursOutput().isEmpty()) {
				Rect r1;
				Rect r2;
				s = pipeline.filterContoursOutput().size();
				if (s == 1) {
					r1 = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
					centerR1 = r1.x + (r1.width / 2);
				} else if (s == 2) {
					r1 = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
					r2 = Imgproc.boundingRect(pipeline.filterContoursOutput().get(1));
					centerR1 = ((r1.x + (r1.width / 2)) + (r2.x + (r2.width / 2))) / 2;
				} else
					centerR1 = 0.00;

			} else {
				s = 0;
				centerR1 = 0;
			}
			synchronized (imgLock) {
				centerX = centerR1;
				numImg = s;
			}
		});

		visionThread.start();

	}

	public boolean driveForward(double inches, boolean elevator, int elevHeight) {
		double gearRatio = 30.00 / 24.00;
		double circumf = (3.25 * 3.14159);
		double wheelRotate = inches / circumf;
		double motorRotate = wheelRotate / gearRatio;
		double pos = motorRotate * 4096;
		double curPos = leftDrive.getSelectedSensorPosition(0);
		leftDrive.set(ControlMode.MotionMagic, -pos);
		rightDrive.set(ControlMode.MotionMagic, -pos);
		SmartDashboard.putNumber("Drive Forward pos", -pos);
		int elevPos = elevHeight;
		double travelPercent = 0.35;
		if (elevator && pos * travelPercent + curPos < 200) {
			turboLift.elevMovePosition(elevPos);
		}
		boolean elevatorComplete = true;
		if (elevator) {
			elevatorComplete = Math.abs(elevPos - turboLift.getPosition()) < 500;
		}
		return Math.abs(curPos + pos) < 200 && elevatorComplete;
	}

	public boolean autoIntake(boolean out, long endTime) {
		if (out) {
			intakeLeft.set(-.4);
			intakeRight.set(.4);
		} else {
			intakeLeft.set(.4);
			intakeRight.set(-.4);
		}

		return endTime - System.currentTimeMillis() < 0;

	}

	public boolean driveTurnWheel(double degrees) {
		double pos = (degrees / 90.00) * 8000;
		leftDrive.set(ControlMode.MotionMagic, -pos);
		rightDrive.set(ControlMode.MotionMagic, pos);
		SmartDashboard.putNumber("Drive Forward pos", pos);
		return (Math.abs(rightDrive.getSelectedSensorPosition(0) - pos) < 200
				|| Math.abs(leftDrive.getSelectedSensorPosition(0) + pos) < 200);

	}

	public boolean driveTurn(double angle) {
		double curAngle = gyro.getAngle();
		double turnSpeed = 0.15;
		double absAngDiff = Math.abs(curAngle - angle);
		SmartDashboard.putNumber("Gyro", curAngle);
		SmartDashboard.putNumber("Angle Diff", absAngDiff);
		if (absAngDiff == curAngle - angle) {
			turnSpeed *= -1;
		}
		if (absAngDiff > 90) {
			turnSpeed *= (absAngDiff) / 180;
		}
		leftDrive.set(ControlMode.PercentOutput, turnSpeed);
		rightDrive.set(ControlMode.PercentOutput, -turnSpeed);

		if (absAngDiff < 5) {
			leftDrive.set(ControlMode.PercentOutput, 0);
			rightDrive.set(ControlMode.PercentOutput, 0);
			return true;
		}
		return false;
	}

}
